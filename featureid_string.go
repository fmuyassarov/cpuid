// Code generated by "stringer -type=FeatureID,Vendor"; DO NOT EDIT.

package cpuid

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ADX-1]
	_ = x[AESNI-2]
	_ = x[AMD3DNOW-3]
	_ = x[AMD3DNOWEXT-4]
	_ = x[AMXBF16-5]
	_ = x[AMXFP16-6]
	_ = x[AMXINT8-7]
	_ = x[AMXTILE-8]
	_ = x[WRMSRNS-9]
	_ = x[AVX-10]
	_ = x[AVX2-11]
	_ = x[AVX512BF16-12]
	_ = x[AVX512BITALG-13]
	_ = x[AVX512BW-14]
	_ = x[AVX512CD-15]
	_ = x[AVX512DQ-16]
	_ = x[AVX512ER-17]
	_ = x[AVX512F-18]
	_ = x[AVX512FP16-19]
	_ = x[AVX512IFMA-20]
	_ = x[AVX512PF-21]
	_ = x[AVX512VBMI-22]
	_ = x[AVX512VBMI2-23]
	_ = x[AVX512VL-24]
	_ = x[AVX512VNNI-25]
	_ = x[AVX512VP2INTERSECT-26]
	_ = x[AVX512VPOPCNTDQ-27]
	_ = x[AVXIFMA-28]
	_ = x[AVXNECONVERT-29]
	_ = x[AVXSLOW-30]
	_ = x[AVXVNNI-31]
	_ = x[AVXVNNIINT8-32]
	_ = x[BMI1-33]
	_ = x[BMI2-34]
	_ = x[CETIBT-35]
	_ = x[CETSS-36]
	_ = x[CLDEMOTE-37]
	_ = x[CLMUL-38]
	_ = x[CLZERO-39]
	_ = x[CMOV-40]
	_ = x[CMPCCXADD-41]
	_ = x[CMPSB_SCADBS_SHORT-42]
	_ = x[CMPXCHG8-43]
	_ = x[CPBOOST-44]
	_ = x[CPPC-45]
	_ = x[CX16-46]
	_ = x[EFER_LMSLE_UNS-47]
	_ = x[ENQCMD-48]
	_ = x[ERMS-49]
	_ = x[F16C-50]
	_ = x[FLUSH_L1D-51]
	_ = x[FMA3-52]
	_ = x[FMA4-53]
	_ = x[FP128-54]
	_ = x[FP256-55]
	_ = x[FSRM-56]
	_ = x[FXSR-57]
	_ = x[FXSROPT-58]
	_ = x[GFNI-59]
	_ = x[HLE-60]
	_ = x[HRESET-61]
	_ = x[HTT-62]
	_ = x[HWA-63]
	_ = x[HYBRID_CPU-64]
	_ = x[HYPERVISOR-65]
	_ = x[IA32_ARCH_CAP-66]
	_ = x[IA32_CORE_CAP-67]
	_ = x[IBPB-68]
	_ = x[IBRS-69]
	_ = x[IBRS_PREFERRED-70]
	_ = x[IBRS_PROVIDES_SMP-71]
	_ = x[IBS-72]
	_ = x[IBSBRNTRGT-73]
	_ = x[IBSFETCHSAM-74]
	_ = x[IBSFFV-75]
	_ = x[IBSOPCNT-76]
	_ = x[IBSOPCNTEXT-77]
	_ = x[IBSOPSAM-78]
	_ = x[IBSRDWROPCNT-79]
	_ = x[IBSRIPINVALIDCHK-80]
	_ = x[IBS_FETCH_CTLX-81]
	_ = x[IBS_OPDATA4-82]
	_ = x[IBS_OPFUSE-83]
	_ = x[IBS_PREVENTHOST-84]
	_ = x[IBS_ZEN4-85]
	_ = x[INT_WBINVD-86]
	_ = x[INVLPGB-87]
	_ = x[LAHF-88]
	_ = x[LAM-89]
	_ = x[LBRVIRT-90]
	_ = x[LZCNT-91]
	_ = x[MCAOVERFLOW-92]
	_ = x[MCDT_NO-93]
	_ = x[MCOMMIT-94]
	_ = x[MD_CLEAR-95]
	_ = x[MMX-96]
	_ = x[MMXEXT-97]
	_ = x[MOVBE-98]
	_ = x[MOVDIR64B-99]
	_ = x[MOVDIRI-100]
	_ = x[MOVSB_ZL-101]
	_ = x[MOVU-102]
	_ = x[MPX-103]
	_ = x[MSRIRC-104]
	_ = x[MSR_PAGEFLUSH-105]
	_ = x[NRIPS-106]
	_ = x[NX-107]
	_ = x[OSXSAVE-108]
	_ = x[PCONFIG-109]
	_ = x[POPCNT-110]
	_ = x[PPIN-111]
	_ = x[PREFETCHI-112]
	_ = x[PSFD-113]
	_ = x[RDPRU-114]
	_ = x[RDRAND-115]
	_ = x[RDSEED-116]
	_ = x[RDTSCP-117]
	_ = x[RTM-118]
	_ = x[RTM_ALWAYS_ABORT-119]
	_ = x[SERIALIZE-120]
	_ = x[SEV-121]
	_ = x[SEV_64BIT-122]
	_ = x[SEV_ALTERNATIVE-123]
	_ = x[SEV_DEBUGSWAP-124]
	_ = x[SEV_ES-125]
	_ = x[SEV_RESTRICTED-126]
	_ = x[SEV_SNP-127]
	_ = x[SGX-128]
	_ = x[SGXLC-129]
	_ = x[SHA-130]
	_ = x[SME-131]
	_ = x[SME_COHERENT-132]
	_ = x[SPEC_CTRL_SSBD-133]
	_ = x[SRBDS_CTRL-134]
	_ = x[SSE-135]
	_ = x[SSE2-136]
	_ = x[SSE3-137]
	_ = x[SSE4-138]
	_ = x[SSE42-139]
	_ = x[SSE4A-140]
	_ = x[SSSE3-141]
	_ = x[STIBP-142]
	_ = x[STIBP_ALWAYSON-143]
	_ = x[STOSB_SHORT-144]
	_ = x[SUCCOR-145]
	_ = x[SVM-146]
	_ = x[SVMDA-147]
	_ = x[SVMFBASID-148]
	_ = x[SVML-149]
	_ = x[SVMNP-150]
	_ = x[SVMPF-151]
	_ = x[SVMPFT-152]
	_ = x[SYSCALL-153]
	_ = x[SYSEE-154]
	_ = x[TBM-155]
	_ = x[TLB_FLUSH_NESTED-156]
	_ = x[TME-157]
	_ = x[TOPEXT-158]
	_ = x[TSCRATEMSR-159]
	_ = x[TSXLDTRK-160]
	_ = x[VAES-161]
	_ = x[VMCBCLEAN-162]
	_ = x[VMPL-163]
	_ = x[VMSA_REGPROT-164]
	_ = x[VMX-165]
	_ = x[VPCLMULQDQ-166]
	_ = x[VTE-167]
	_ = x[WAITPKG-168]
	_ = x[WBNOINVD-169]
	_ = x[X87-170]
	_ = x[XGETBV1-171]
	_ = x[XOP-172]
	_ = x[XSAVE-173]
	_ = x[XSAVEC-174]
	_ = x[XSAVEOPT-175]
	_ = x[XSAVES-176]
	_ = x[AESARM-177]
	_ = x[ARMCPUID-178]
	_ = x[ASIMD-179]
	_ = x[ASIMDDP-180]
	_ = x[ASIMDHP-181]
	_ = x[ASIMDRDM-182]
	_ = x[ATOMICS-183]
	_ = x[CRC32-184]
	_ = x[DCPOP-185]
	_ = x[EVTSTRM-186]
	_ = x[FCMA-187]
	_ = x[FP-188]
	_ = x[FPHP-189]
	_ = x[GPA-190]
	_ = x[JSCVT-191]
	_ = x[LRCPC-192]
	_ = x[PMULL-193]
	_ = x[SHA1-194]
	_ = x[SHA2-195]
	_ = x[SHA3-196]
	_ = x[SHA512-197]
	_ = x[SM3-198]
	_ = x[SM4-199]
	_ = x[SVE-200]
	_ = x[lastID-201]
	_ = x[firstID-0]
}

const _FeatureID_name = "firstIDADXAESNIAMD3DNOWAMD3DNOWEXTAMXBF16AMXFP16AMXINT8AMXTILEWRMSRNSAVXAVX2AVX512BF16AVX512BITALGAVX512BWAVX512CDAVX512DQAVX512ERAVX512FAVX512FP16AVX512IFMAAVX512PFAVX512VBMIAVX512VBMI2AVX512VLAVX512VNNIAVX512VP2INTERSECTAVX512VPOPCNTDQAVXIFMAAVXNECONVERTAVXSLOWAVXVNNIAVXVNNIINT8BMI1BMI2CETIBTCETSSCLDEMOTECLMULCLZEROCMOVCMPCCXADDCMPSB_SCADBS_SHORTCMPXCHG8CPBOOSTCPPCCX16EFER_LMSLE_UNSENQCMDERMSF16CFLUSH_L1DFMA3FMA4FP128FP256FSRMFXSRFXSROPTGFNIHLEHRESETHTTHWAHYBRID_CPUHYPERVISORIA32_ARCH_CAPIA32_CORE_CAPIBPBIBRSIBRS_PREFERREDIBRS_PROVIDES_SMPIBSIBSBRNTRGTIBSFETCHSAMIBSFFVIBSOPCNTIBSOPCNTEXTIBSOPSAMIBSRDWROPCNTIBSRIPINVALIDCHKIBS_FETCH_CTLXIBS_OPDATA4IBS_OPFUSEIBS_PREVENTHOSTIBS_ZEN4INT_WBINVDINVLPGBLAHFLAMLBRVIRTLZCNTMCAOVERFLOWMCDT_NOMCOMMITMD_CLEARMMXMMXEXTMOVBEMOVDIR64BMOVDIRIMOVSB_ZLMOVUMPXMSRIRCMSR_PAGEFLUSHNRIPSNXOSXSAVEPCONFIGPOPCNTPPINPREFETCHIPSFDRDPRURDRANDRDSEEDRDTSCPRTMRTM_ALWAYS_ABORTSERIALIZESEVSEV_64BITSEV_ALTERNATIVESEV_DEBUGSWAPSEV_ESSEV_RESTRICTEDSEV_SNPSGXSGXLCSHASMESME_COHERENTSPEC_CTRL_SSBDSRBDS_CTRLSSESSE2SSE3SSE4SSE42SSE4ASSSE3STIBPSTIBP_ALWAYSONSTOSB_SHORTSUCCORSVMSVMDASVMFBASIDSVMLSVMNPSVMPFSVMPFTSYSCALLSYSEETBMTLB_FLUSH_NESTEDTMETOPEXTTSCRATEMSRTSXLDTRKVAESVMCBCLEANVMPLVMSA_REGPROTVMXVPCLMULQDQVTEWAITPKGWBNOINVDX87XGETBV1XOPXSAVEXSAVECXSAVEOPTXSAVESAESARMARMCPUIDASIMDASIMDDPASIMDHPASIMDRDMATOMICSCRC32DCPOPEVTSTRMFCMAFPFPHPGPAJSCVTLRCPCPMULLSHA1SHA2SHA3SHA512SM3SM4SVElastID"

var _FeatureID_index = [...]uint16{0, 7, 10, 15, 23, 34, 41, 48, 55, 62, 69, 72, 76, 86, 98, 106, 114, 122, 130, 137, 147, 157, 165, 175, 186, 194, 204, 222, 237, 244, 256, 263, 270, 281, 285, 289, 295, 300, 308, 313, 319, 323, 332, 350, 358, 365, 369, 373, 387, 393, 397, 401, 410, 414, 418, 423, 428, 432, 436, 443, 447, 450, 456, 459, 462, 472, 482, 495, 508, 512, 516, 530, 547, 550, 560, 571, 577, 585, 596, 604, 616, 632, 646, 657, 667, 682, 690, 700, 707, 711, 714, 721, 726, 737, 744, 751, 759, 762, 768, 773, 782, 789, 797, 801, 804, 810, 823, 828, 830, 837, 844, 850, 854, 863, 867, 872, 878, 884, 890, 893, 909, 918, 921, 930, 945, 958, 964, 978, 985, 988, 993, 996, 999, 1011, 1025, 1035, 1038, 1042, 1046, 1050, 1055, 1060, 1065, 1070, 1084, 1095, 1101, 1104, 1109, 1118, 1122, 1127, 1132, 1138, 1145, 1150, 1153, 1169, 1172, 1178, 1188, 1196, 1200, 1209, 1213, 1225, 1228, 1238, 1241, 1248, 1256, 1259, 1266, 1269, 1274, 1280, 1288, 1294, 1300, 1308, 1313, 1320, 1327, 1335, 1342, 1347, 1352, 1359, 1363, 1365, 1369, 1372, 1377, 1382, 1387, 1391, 1395, 1399, 1405, 1408, 1411, 1414, 1420}

func (i FeatureID) String() string {
	if i < 0 || i >= FeatureID(len(_FeatureID_index)-1) {
		return "FeatureID(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FeatureID_name[_FeatureID_index[i]:_FeatureID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VendorUnknown-0]
	_ = x[Intel-1]
	_ = x[AMD-2]
	_ = x[VIA-3]
	_ = x[Transmeta-4]
	_ = x[NSC-5]
	_ = x[KVM-6]
	_ = x[MSVM-7]
	_ = x[VMware-8]
	_ = x[XenHVM-9]
	_ = x[Bhyve-10]
	_ = x[Hygon-11]
	_ = x[SiS-12]
	_ = x[RDC-13]
	_ = x[Ampere-14]
	_ = x[ARM-15]
	_ = x[Broadcom-16]
	_ = x[Cavium-17]
	_ = x[DEC-18]
	_ = x[Fujitsu-19]
	_ = x[Infineon-20]
	_ = x[Motorola-21]
	_ = x[NVIDIA-22]
	_ = x[AMCC-23]
	_ = x[Qualcomm-24]
	_ = x[Marvell-25]
	_ = x[lastVendor-26]
}

const _Vendor_name = "VendorUnknownIntelAMDVIATransmetaNSCKVMMSVMVMwareXenHVMBhyveHygonSiSRDCAmpereARMBroadcomCaviumDECFujitsuInfineonMotorolaNVIDIAAMCCQualcommMarvelllastVendor"

var _Vendor_index = [...]uint8{0, 13, 18, 21, 24, 33, 36, 39, 43, 49, 55, 60, 65, 68, 71, 77, 80, 88, 94, 97, 104, 112, 120, 126, 130, 138, 145, 155}

func (i Vendor) String() string {
	if i < 0 || i >= Vendor(len(_Vendor_index)-1) {
		return "Vendor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Vendor_name[_Vendor_index[i]:_Vendor_index[i+1]]
}
